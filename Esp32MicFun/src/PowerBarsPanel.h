#pragma once

#include <FastLED.h>
#include <string>
constexpr uint16_t PANEL_WIDTH_33 = 33; // from 1 to 33
constexpr uint16_t PANEL_WIDTH_64 = 64; // from 1 to 64
constexpr uint16_t PANEL_HEIGHT_8 = 8; // from 1 to 8
constexpr uint16_t PANEL_HEIGHT_9 = 9; // from 1 to 9
constexpr uint16_t PANEL_HEIGHT_12 = 12; // from 1 to 12
constexpr uint16_t PANEL_HEIGHT_13 = 13; // from 1 to 13
constexpr uint16_t PANEL_HEIGHT_16 = 16; // from 1 to 16
constexpr uint16_t PANEL_HEIGHT_24 = 24; // from 1 to 24
constexpr uint16_t PANEL_HEIGHT_32 = 32; // from 1 to 32

constexpr uint16_t BAR_DEC_TIME_MS = 25; // 50; // hold each bar max current value at least this amount of time
constexpr uint16_t BAR_TOP_TIME_MS = BAR_DEC_TIME_MS * 10; // hold the top for this amount

template <uint16_t PANEL_WIDTH, uint16_t PANEL_HEIGHT>
class IPanelMapping {
public:
    // Implements the mapping between the passed (x,y) coordinates and the serpentine led_strip
    virtual uint16_t XY(uint16_t x, uint16_t y) = 0;
    // returns the dimension of this mapping
    virtual uint16_t GetWidth() { return PANEL_WIDTH; }
    virtual uint16_t GetHeight() { return PANEL_HEIGHT; }
};

// Mapping implementation for the 33x9 panel
class PanelMapping33x9 : public IPanelMapping<PANEL_WIDTH_33, PANEL_HEIGHT_9> {
public:
    virtual uint16_t XY(uint16_t x, uint16_t y) override
    {
        // mapping created using the https://macetech.github.io/FastLED-XY-Map-Generator/
        static constexpr uint16_t XYTable[PANEL_WIDTH_33 * PANEL_HEIGHT_9] = {
            296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264,
            231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
            230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198,
            165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
            164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132,
            99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
            98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
            32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
        };
        // any out of bounds address maps to the first hidden pixel
        if ((x >= PANEL_WIDTH_33) || (y >= PANEL_HEIGHT_9)) {
            return (PANEL_WIDTH_33 * PANEL_HEIGHT_9);
        }

        uint16_t i = (y * PANEL_WIDTH_33) + x;
        uint16_t j = XYTable[i];
        return j;
    }
};

// // Mapping implementation for the 33x12 panel
// class PanelMapping33x12 : public IPanelMapping<PANEL_WIDTH_33, PANEL_HEIGHT_12> {
// public:
//     virtual uint16_t XY(uint16_t x, uint16_t y) override
//     {
//         // mapping created using the https://macetech.github.io/FastLED-XY-Map-Generator/
//         static constexpr uint16_t XYTable[PANEL_WIDTH_33 * PANEL_HEIGHT_12] = {
//             363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395,
//             362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330,
//             297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
//             296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264,
//             231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
//             230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198,
//             165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
//             164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132,
//             99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
//             98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66,
//             33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
//             32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
//         };
//         // any out of bounds address maps to the first hidden pixel
//         if ((x >= PANEL_WIDTH_33) || (y >= PANEL_HEIGHT_12)) {
//             return (PANEL_WIDTH_33 * PANEL_HEIGHT_12);
//         }

//         uint16_t i = (y * PANEL_WIDTH_33) + x;
//         uint16_t j = XYTable[i];
//         return j;
//     }
// };

// // Mapping implementation for the 33x13 panel
// class PanelMapping33x13 : public IPanelMapping<PANEL_WIDTH_33, PANEL_HEIGHT_13> {
// public:
//     virtual uint16_t XY(uint16_t x, uint16_t y) override
//     {
//         // mapping created using the https://macetech.github.io/FastLED-XY-Map-Generator/
//         static constexpr uint16_t XYTable[PANEL_WIDTH_33 * PANEL_HEIGHT_13] = {
//             428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396,
//             363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395,
//             362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330,
//             297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
//             296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264,
//             231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
//             230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198,
//             165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
//             164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132,
//             99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
//             98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66,
//             33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
//             32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
//         };
//         // any out of bounds address maps to the first hidden pixel
//         if ((x >= PANEL_WIDTH_33) || (y >= PANEL_HEIGHT_13)) {
//             return (PANEL_WIDTH_33 * PANEL_HEIGHT_13);
//         }

//         uint16_t i = (y * PANEL_WIDTH_33) + x;
//         uint16_t j = XYTable[i];
//         return j;
//     }
// };

// Mapping implementation for the 33x16 panel
class PanelMapping33x16 : public IPanelMapping<PANEL_WIDTH_33, PANEL_HEIGHT_16> {
public:
    virtual uint16_t XY(uint16_t x, uint16_t y) override
    {
        // mapping created using the https://macetech.github.io/FastLED-XY-Map-Generator/
        static constexpr uint16_t XYTable[PANEL_WIDTH_33 * PANEL_HEIGHT_16] = {
            495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
            494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462,
            429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
            428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411, 410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396,
            363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395,
            362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330,
            297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
            296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264,
            231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
            230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198,
            165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
            164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132,
            99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
            98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
            32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
        };
        // any out of bounds address maps to the first hidden pixel
        if ((x >= PANEL_WIDTH_33) || (y >= PANEL_HEIGHT_16)) {
            return (PANEL_WIDTH_33 * PANEL_HEIGHT_16);
        }

        uint16_t i = (y * PANEL_WIDTH_33) + x;
        uint16_t j = XYTable[i];
        return j;
    }
};

// Mapping implementation for the 8x64 panel
// class PanelMapping64x8 : public IPanelMapping<PANEL_WIDTH_64, PANEL_HEIGHT_8> {
// public:
//     virtual uint16_t XY(uint16_t x, uint16_t y) override
//     {
//         // mapping created using the https://macetech.github.io/FastLED-XY-Map-Generator/
//         static constexpr uint16_t XYTable[PANEL_WIDTH_64 * PANEL_HEIGHT_8] = {
//             504, 503, 488, 487, 472, 471, 456, 455, 440, 439, 424, 423, 408, 407, 392, 391, 376, 375, 360, 359, 344, 343, 328, 327, 312, 311, 296, 295, 280, 279, 264, 263, 248, 247, 232, 231, 216, 215, 200, 199, 184, 183, 168, 167, 152, 151, 136, 135, 120, 119, 104, 103, 88, 87, 72, 71, 56, 55, 40, 39, 24, 23, 8, 7,
//             505, 502, 489, 486, 473, 470, 457, 454, 441, 438, 425, 422, 409, 406, 393, 390, 377, 374, 361, 358, 345, 342, 329, 326, 313, 310, 297, 294, 281, 278, 265, 262, 249, 246, 233, 230, 217, 214, 201, 198, 185, 182, 169, 166, 153, 150, 137, 134, 121, 118, 105, 102, 89, 86, 73, 70, 57, 54, 41, 38, 25, 22, 9, 6,
//             506, 501, 490, 485, 474, 469, 458, 453, 442, 437, 426, 421, 410, 405, 394, 389, 378, 373, 362, 357, 346, 341, 330, 325, 314, 309, 298, 293, 282, 277, 266, 261, 250, 245, 234, 229, 218, 213, 202, 197, 186, 181, 170, 165, 154, 149, 138, 133, 122, 117, 106, 101, 90, 85, 74, 69, 58, 53, 42, 37, 26, 21, 10, 5,
//             507, 500, 491, 484, 475, 468, 459, 452, 443, 436, 427, 420, 411, 404, 395, 388, 379, 372, 363, 356, 347, 340, 331, 324, 315, 308, 299, 292, 283, 276, 267, 260, 251, 244, 235, 228, 219, 212, 203, 196, 187, 180, 171, 164, 155, 148, 139, 132, 123, 116, 107, 100, 91, 84, 75, 68, 59, 52, 43, 36, 27, 20, 11, 4,
//             508, 499, 492, 483, 476, 467, 460, 451, 444, 435, 428, 419, 412, 403, 396, 387, 380, 371, 364, 355, 348, 339, 332, 323, 316, 307, 300, 291, 284, 275, 268, 259, 252, 243, 236, 227, 220, 211, 204, 195, 188, 179, 172, 163, 156, 147, 140, 131, 124, 115, 108, 99, 92, 83, 76, 67, 60, 51, 44, 35, 28, 19, 12, 3,
//             509, 498, 493, 482, 477, 466, 461, 450, 445, 434, 429, 418, 413, 402, 397, 386, 381, 370, 365, 354, 349, 338, 333, 322, 317, 306, 301, 290, 285, 274, 269, 258, 253, 242, 237, 226, 221, 210, 205, 194, 189, 178, 173, 162, 157, 146, 141, 130, 125, 114, 109, 98, 93, 82, 77, 66, 61, 50, 45, 34, 29, 18, 13, 2,
//             510, 497, 494, 481, 478, 465, 462, 449, 446, 433, 430, 417, 414, 401, 398, 385, 382, 369, 366, 353, 350, 337, 334, 321, 318, 305, 302, 289, 286, 273, 270, 257, 254, 241, 238, 225, 222, 209, 206, 193, 190, 177, 174, 161, 158, 145, 142, 129, 126, 113, 110, 97, 94, 81, 78, 65, 62, 49, 46, 33, 30, 17, 14, 1,
//             511, 496, 495, 480, 479, 464, 463, 448, 447, 432, 431, 416, 415, 400, 399, 384, 383, 368, 367, 352, 351, 336, 335, 320, 319, 304, 303, 288, 287, 272, 271, 256, 255, 240, 239, 224, 223, 208, 207, 192, 191, 176, 175, 160, 159, 144, 143, 128, 127, 112, 111, 96, 95, 80, 79, 64, 63, 48, 47, 32, 31, 16, 15, 0
//         };
//         // any out of bounds address maps to the first hidden pixel
//         if ((x >= PANEL_WIDTH_64) || (y >= PANEL_HEIGHT_8)) {
//             return (PANEL_WIDTH_64 * PANEL_HEIGHT_8) - 1;
//         }

//         uint16_t i = (y * PANEL_WIDTH_64) + x;
//         uint16_t j = XYTable[i];
//         return j;
//     }
// };

// Mapping implementation for the 64x16 panel (made of 4 32x8 pannels)
class PanelMapping64x16 : public IPanelMapping<PANEL_WIDTH_64, PANEL_HEIGHT_16> {
public:
    virtual uint16_t XY(uint16_t x, uint16_t y) override
    {
        // mapping created using the https://macetech.github.io/FastLED-XY-Map-Generator/
        static constexpr uint16_t XYTable[PANEL_WIDTH_64 * PANEL_HEIGHT_16] = {
            512, 527, 528, 543, 544, 559, 560, 575, 576, 591, 592, 607, 608, 623, 624, 639, 640, 655, 656, 671, 672, 687, 688, 703, 704, 719, 720, 735, 736, 751, 752, 767, 768, 783, 784, 799, 800, 815, 816, 831, 832, 847, 848, 863, 864, 879, 880, 895, 896, 911, 912, 927, 928, 943, 944, 959, 960, 975, 976, 991, 992, 1007, 1008, 1023,
            513, 526, 529, 542, 545, 558, 561, 574, 577, 590, 593, 606, 609, 622, 625, 638, 641, 654, 657, 670, 673, 686, 689, 702, 705, 718, 721, 734, 737, 750, 753, 766, 769, 782, 785, 798, 801, 814, 817, 830, 833, 846, 849, 862, 865, 878, 881, 894, 897, 910, 913, 926, 929, 942, 945, 958, 961, 974, 977, 990, 993, 1006, 1009, 1022,
            514, 525, 530, 541, 546, 557, 562, 573, 578, 589, 594, 605, 610, 621, 626, 637, 642, 653, 658, 669, 674, 685, 690, 701, 706, 717, 722, 733, 738, 749, 754, 765, 770, 781, 786, 797, 802, 813, 818, 829, 834, 845, 850, 861, 866, 877, 882, 893, 898, 909, 914, 925, 930, 941, 946, 957, 962, 973, 978, 989, 994, 1005, 1010, 1021,
            515, 524, 531, 540, 547, 556, 563, 572, 579, 588, 595, 604, 611, 620, 627, 636, 643, 652, 659, 668, 675, 684, 691, 700, 707, 716, 723, 732, 739, 748, 755, 764, 771, 780, 787, 796, 803, 812, 819, 828, 835, 844, 851, 860, 867, 876, 883, 892, 899, 908, 915, 924, 931, 940, 947, 956, 963, 972, 979, 988, 995, 1004, 1011, 1020,
            516, 523, 532, 539, 548, 555, 564, 571, 580, 587, 596, 603, 612, 619, 628, 635, 644, 651, 660, 667, 676, 683, 692, 699, 708, 715, 724, 731, 740, 747, 756, 763, 772, 779, 788, 795, 804, 811, 820, 827, 836, 843, 852, 859, 868, 875, 884, 891, 900, 907, 916, 923, 932, 939, 948, 955, 964, 971, 980, 987, 996, 1003, 1012, 1019,
            517, 522, 533, 538, 549, 554, 565, 570, 581, 586, 597, 602, 613, 618, 629, 634, 645, 650, 661, 666, 677, 682, 693, 698, 709, 714, 725, 730, 741, 746, 757, 762, 773, 778, 789, 794, 805, 810, 821, 826, 837, 842, 853, 858, 869, 874, 885, 890, 901, 906, 917, 922, 933, 938, 949, 954, 965, 970, 981, 986, 997, 1002, 1013, 1018,
            518, 521, 534, 537, 550, 553, 566, 569, 582, 585, 598, 601, 614, 617, 630, 633, 646, 649, 662, 665, 678, 681, 694, 697, 710, 713, 726, 729, 742, 745, 758, 761, 774, 777, 790, 793, 806, 809, 822, 825, 838, 841, 854, 857, 870, 873, 886, 889, 902, 905, 918, 921, 934, 937, 950, 953, 966, 969, 982, 985, 998, 1001, 1014, 1017,
            519, 520, 535, 536, 551, 552, 567, 568, 583, 584, 599, 600, 615, 616, 631, 632, 647, 648, 663, 664, 679, 680, 695, 696, 711, 712, 727, 728, 743, 744, 759, 760, 775, 776, 791, 792, 807, 808, 823, 824, 839, 840, 855, 856, 871, 872, 887, 888, 903, 904, 919, 920, 935, 936, 951, 952, 967, 968, 983, 984, 999, 1000, 1015, 1016,
            504, 503, 488, 487, 472, 471, 456, 455, 440, 439, 424, 423, 408, 407, 392, 391, 376, 375, 360, 359, 344, 343, 328, 327, 312, 311, 296, 295, 280, 279, 264, 263, 248, 247, 232, 231, 216, 215, 200, 199, 184, 183, 168, 167, 152, 151, 136, 135, 120, 119, 104, 103, 88, 87, 72, 71, 56, 55, 40, 39, 24, 23, 8, 7,
            505, 502, 489, 486, 473, 470, 457, 454, 441, 438, 425, 422, 409, 406, 393, 390, 377, 374, 361, 358, 345, 342, 329, 326, 313, 310, 297, 294, 281, 278, 265, 262, 249, 246, 233, 230, 217, 214, 201, 198, 185, 182, 169, 166, 153, 150, 137, 134, 121, 118, 105, 102, 89, 86, 73, 70, 57, 54, 41, 38, 25, 22, 9, 6,
            506, 501, 490, 485, 474, 469, 458, 453, 442, 437, 426, 421, 410, 405, 394, 389, 378, 373, 362, 357, 346, 341, 330, 325, 314, 309, 298, 293, 282, 277, 266, 261, 250, 245, 234, 229, 218, 213, 202, 197, 186, 181, 170, 165, 154, 149, 138, 133, 122, 117, 106, 101, 90, 85, 74, 69, 58, 53, 42, 37, 26, 21, 10, 5,
            507, 500, 491, 484, 475, 468, 459, 452, 443, 436, 427, 420, 411, 404, 395, 388, 379, 372, 363, 356, 347, 340, 331, 324, 315, 308, 299, 292, 283, 276, 267, 260, 251, 244, 235, 228, 219, 212, 203, 196, 187, 180, 171, 164, 155, 148, 139, 132, 123, 116, 107, 100, 91, 84, 75, 68, 59, 52, 43, 36, 27, 20, 11, 4,
            508, 499, 492, 483, 476, 467, 460, 451, 444, 435, 428, 419, 412, 403, 396, 387, 380, 371, 364, 355, 348, 339, 332, 323, 316, 307, 300, 291, 284, 275, 268, 259, 252, 243, 236, 227, 220, 211, 204, 195, 188, 179, 172, 163, 156, 147, 140, 131, 124, 115, 108, 99, 92, 83, 76, 67, 60, 51, 44, 35, 28, 19, 12, 3,
            509, 498, 493, 482, 477, 466, 461, 450, 445, 434, 429, 418, 413, 402, 397, 386, 381, 370, 365, 354, 349, 338, 333, 322, 317, 306, 301, 290, 285, 274, 269, 258, 253, 242, 237, 226, 221, 210, 205, 194, 189, 178, 173, 162, 157, 146, 141, 130, 125, 114, 109, 98, 93, 82, 77, 66, 61, 50, 45, 34, 29, 18, 13, 2,
            510, 497, 494, 481, 478, 465, 462, 449, 446, 433, 430, 417, 414, 401, 398, 385, 382, 369, 366, 353, 350, 337, 334, 321, 318, 305, 302, 289, 286, 273, 270, 257, 254, 241, 238, 225, 222, 209, 206, 193, 190, 177, 174, 161, 158, 145, 142, 129, 126, 113, 110, 97, 94, 81, 78, 65, 62, 49, 46, 33, 30, 17, 14, 1,
            511, 496, 495, 480, 479, 464, 463, 448, 447, 432, 431, 416, 415, 400, 399, 384, 383, 368, 367, 352, 351, 336, 335, 320, 319, 304, 303, 288, 287, 272, 271, 256, 255, 240, 239, 224, 223, 208, 207, 192, 191, 176, 175, 160, 159, 144, 143, 128, 127, 112, 111, 96, 95, 80, 79, 64, 63, 48, 47, 32, 31, 16, 15, 0
        };
        // any out of bounds address maps to the first hidden pixel
        if ((x >= PANEL_WIDTH_64) || (y >= PANEL_HEIGHT_16)) {
            return (PANEL_WIDTH_64 * PANEL_HEIGHT_16) - 1;
        }

        uint16_t i = (y * PANEL_WIDTH_64) + x;
        uint16_t j = XYTable[i];
        return j;
    }
};

class PanelMapping64x32 : public IPanelMapping<PANEL_WIDTH_64, PANEL_HEIGHT_32> {
public:
    virtual uint16_t XY(uint16_t x, uint16_t y) override
    {
        // mapping created using the https://macetech.github.io/FastLED-XY-Map-Generator/
        static constexpr uint16_t XYTable[PANEL_WIDTH_64 * PANEL_HEIGHT_32] = {
            2040, 2039, 2024, 2023, 2008, 2007, 1992, 1991, 1976, 1975, 1960, 1959, 1944, 1943, 1928, 1927, 1912, 1911, 1896, 1895, 1880, 1879, 1864, 1863, 1848, 1847, 1832, 1831, 1816, 1815, 1800, 1799, 1784, 1783, 1768, 1767, 1752, 1751, 1736, 1735, 1720, 1719, 1704, 1703, 1688, 1687, 1672, 1671, 1656, 1655, 1640, 1639, 1624, 1623, 1608, 1607, 1592, 1591, 1576, 1575, 1560, 1559, 1544, 1543,
            2041, 2038, 2025, 2022, 2009, 2006, 1993, 1990, 1977, 1974, 1961, 1958, 1945, 1942, 1929, 1926, 1913, 1910, 1897, 1894, 1881, 1878, 1865, 1862, 1849, 1846, 1833, 1830, 1817, 1814, 1801, 1798, 1785, 1782, 1769, 1766, 1753, 1750, 1737, 1734, 1721, 1718, 1705, 1702, 1689, 1686, 1673, 1670, 1657, 1654, 1641, 1638, 1625, 1622, 1609, 1606, 1593, 1590, 1577, 1574, 1561, 1558, 1545, 1542,
            2042, 2037, 2026, 2021, 2010, 2005, 1994, 1989, 1978, 1973, 1962, 1957, 1946, 1941, 1930, 1925, 1914, 1909, 1898, 1893, 1882, 1877, 1866, 1861, 1850, 1845, 1834, 1829, 1818, 1813, 1802, 1797, 1786, 1781, 1770, 1765, 1754, 1749, 1738, 1733, 1722, 1717, 1706, 1701, 1690, 1685, 1674, 1669, 1658, 1653, 1642, 1637, 1626, 1621, 1610, 1605, 1594, 1589, 1578, 1573, 1562, 1557, 1546, 1541,
            2043, 2036, 2027, 2020, 2011, 2004, 1995, 1988, 1979, 1972, 1963, 1956, 1947, 1940, 1931, 1924, 1915, 1908, 1899, 1892, 1883, 1876, 1867, 1860, 1851, 1844, 1835, 1828, 1819, 1812, 1803, 1796, 1787, 1780, 1771, 1764, 1755, 1748, 1739, 1732, 1723, 1716, 1707, 1700, 1691, 1684, 1675, 1668, 1659, 1652, 1643, 1636, 1627, 1620, 1611, 1604, 1595, 1588, 1579, 1572, 1563, 1556, 1547, 1540,
            2044, 2035, 2028, 2019, 2012, 2003, 1996, 1987, 1980, 1971, 1964, 1955, 1948, 1939, 1932, 1923, 1916, 1907, 1900, 1891, 1884, 1875, 1868, 1859, 1852, 1843, 1836, 1827, 1820, 1811, 1804, 1795, 1788, 1779, 1772, 1763, 1756, 1747, 1740, 1731, 1724, 1715, 1708, 1699, 1692, 1683, 1676, 1667, 1660, 1651, 1644, 1635, 1628, 1619, 1612, 1603, 1596, 1587, 1580, 1571, 1564, 1555, 1548, 1539,
            2045, 2034, 2029, 2018, 2013, 2002, 1997, 1986, 1981, 1970, 1965, 1954, 1949, 1938, 1933, 1922, 1917, 1906, 1901, 1890, 1885, 1874, 1869, 1858, 1853, 1842, 1837, 1826, 1821, 1810, 1805, 1794, 1789, 1778, 1773, 1762, 1757, 1746, 1741, 1730, 1725, 1714, 1709, 1698, 1693, 1682, 1677, 1666, 1661, 1650, 1645, 1634, 1629, 1618, 1613, 1602, 1597, 1586, 1581, 1570, 1565, 1554, 1549, 1538,
            2046, 2033, 2030, 2017, 2014, 2001, 1998, 1985, 1982, 1969, 1966, 1953, 1950, 1937, 1934, 1921, 1918, 1905, 1902, 1889, 1886, 1873, 1870, 1857, 1854, 1841, 1838, 1825, 1822, 1809, 1806, 1793, 1790, 1777, 1774, 1761, 1758, 1745, 1742, 1729, 1726, 1713, 1710, 1697, 1694, 1681, 1678, 1665, 1662, 1649, 1646, 1633, 1630, 1617, 1614, 1601, 1598, 1585, 1582, 1569, 1566, 1553, 1550, 1537,
            2047, 2032, 2031, 2016, 2015, 2000, 1999, 1984, 1983, 1968, 1967, 1952, 1951, 1936, 1935, 1920, 1919, 1904, 1903, 1888, 1887, 1872, 1871, 1856, 1855, 1840, 1839, 1824, 1823, 1808, 1807, 1792, 1791, 1776, 1775, 1760, 1759, 1744, 1743, 1728, 1727, 1712, 1711, 1696, 1695, 1680, 1679, 1664, 1663, 1648, 1647, 1632, 1631, 1616, 1615, 1600, 1599, 1584, 1583, 1568, 1567, 1552, 1551, 1536,
            1528, 1527, 1512, 1511, 1496, 1495, 1480, 1479, 1464, 1463, 1448, 1447, 1432, 1431, 1416, 1415, 1400, 1399, 1384, 1383, 1368, 1367, 1352, 1351, 1336, 1335, 1320, 1319, 1304, 1303, 1288, 1287, 1272, 1271, 1256, 1255, 1240, 1239, 1224, 1223, 1208, 1207, 1192, 1191, 1176, 1175, 1160, 1159, 1144, 1143, 1128, 1127, 1112, 1111, 1096, 1095, 1080, 1079, 1064, 1063, 1048, 1047, 1032, 1031,
            1529, 1526, 1513, 1510, 1497, 1494, 1481, 1478, 1465, 1462, 1449, 1446, 1433, 1430, 1417, 1414, 1401, 1398, 1385, 1382, 1369, 1366, 1353, 1350, 1337, 1334, 1321, 1318, 1305, 1302, 1289, 1286, 1273, 1270, 1257, 1254, 1241, 1238, 1225, 1222, 1209, 1206, 1193, 1190, 1177, 1174, 1161, 1158, 1145, 1142, 1129, 1126, 1113, 1110, 1097, 1094, 1081, 1078, 1065, 1062, 1049, 1046, 1033, 1030,
            1530, 1525, 1514, 1509, 1498, 1493, 1482, 1477, 1466, 1461, 1450, 1445, 1434, 1429, 1418, 1413, 1402, 1397, 1386, 1381, 1370, 1365, 1354, 1349, 1338, 1333, 1322, 1317, 1306, 1301, 1290, 1285, 1274, 1269, 1258, 1253, 1242, 1237, 1226, 1221, 1210, 1205, 1194, 1189, 1178, 1173, 1162, 1157, 1146, 1141, 1130, 1125, 1114, 1109, 1098, 1093, 1082, 1077, 1066, 1061, 1050, 1045, 1034, 1029,
            1531, 1524, 1515, 1508, 1499, 1492, 1483, 1476, 1467, 1460, 1451, 1444, 1435, 1428, 1419, 1412, 1403, 1396, 1387, 1380, 1371, 1364, 1355, 1348, 1339, 1332, 1323, 1316, 1307, 1300, 1291, 1284, 1275, 1268, 1259, 1252, 1243, 1236, 1227, 1220, 1211, 1204, 1195, 1188, 1179, 1172, 1163, 1156, 1147, 1140, 1131, 1124, 1115, 1108, 1099, 1092, 1083, 1076, 1067, 1060, 1051, 1044, 1035, 1028,
            1532, 1523, 1516, 1507, 1500, 1491, 1484, 1475, 1468, 1459, 1452, 1443, 1436, 1427, 1420, 1411, 1404, 1395, 1388, 1379, 1372, 1363, 1356, 1347, 1340, 1331, 1324, 1315, 1308, 1299, 1292, 1283, 1276, 1267, 1260, 1251, 1244, 1235, 1228, 1219, 1212, 1203, 1196, 1187, 1180, 1171, 1164, 1155, 1148, 1139, 1132, 1123, 1116, 1107, 1100, 1091, 1084, 1075, 1068, 1059, 1052, 1043, 1036, 1027,
            1533, 1522, 1517, 1506, 1501, 1490, 1485, 1474, 1469, 1458, 1453, 1442, 1437, 1426, 1421, 1410, 1405, 1394, 1389, 1378, 1373, 1362, 1357, 1346, 1341, 1330, 1325, 1314, 1309, 1298, 1293, 1282, 1277, 1266, 1261, 1250, 1245, 1234, 1229, 1218, 1213, 1202, 1197, 1186, 1181, 1170, 1165, 1154, 1149, 1138, 1133, 1122, 1117, 1106, 1101, 1090, 1085, 1074, 1069, 1058, 1053, 1042, 1037, 1026,
            1534, 1521, 1518, 1505, 1502, 1489, 1486, 1473, 1470, 1457, 1454, 1441, 1438, 1425, 1422, 1409, 1406, 1393, 1390, 1377, 1374, 1361, 1358, 1345, 1342, 1329, 1326, 1313, 1310, 1297, 1294, 1281, 1278, 1265, 1262, 1249, 1246, 1233, 1230, 1217, 1214, 1201, 1198, 1185, 1182, 1169, 1166, 1153, 1150, 1137, 1134, 1121, 1118, 1105, 1102, 1089, 1086, 1073, 1070, 1057, 1054, 1041, 1038, 1025,
            1535, 1520, 1519, 1504, 1503, 1488, 1487, 1472, 1471, 1456, 1455, 1440, 1439, 1424, 1423, 1408, 1407, 1392, 1391, 1376, 1375, 1360, 1359, 1344, 1343, 1328, 1327, 1312, 1311, 1296, 1295, 1280, 1279, 1264, 1263, 1248, 1247, 1232, 1231, 1216, 1215, 1200, 1199, 1184, 1183, 1168, 1167, 1152, 1151, 1136, 1135, 1120, 1119, 1104, 1103, 1088, 1087, 1072, 1071, 1056, 1055, 1040, 1039, 1024,
            1016, 1015, 1000, 999, 984, 983, 968, 967, 952, 951, 936, 935, 920, 919, 904, 903, 888, 887, 872, 871, 856, 855, 840, 839, 824, 823, 808, 807, 792, 791, 776, 775, 760, 759, 744, 743, 728, 727, 712, 711, 696, 695, 680, 679, 664, 663, 648, 647, 632, 631, 616, 615, 600, 599, 584, 583, 568, 567, 552, 551, 536, 535, 520, 519,
            1017, 1014, 1001, 998, 985, 982, 969, 966, 953, 950, 937, 934, 921, 918, 905, 902, 889, 886, 873, 870, 857, 854, 841, 838, 825, 822, 809, 806, 793, 790, 777, 774, 761, 758, 745, 742, 729, 726, 713, 710, 697, 694, 681, 678, 665, 662, 649, 646, 633, 630, 617, 614, 601, 598, 585, 582, 569, 566, 553, 550, 537, 534, 521, 518,
            1018, 1013, 1002, 997, 986, 981, 970, 965, 954, 949, 938, 933, 922, 917, 906, 901, 890, 885, 874, 869, 858, 853, 842, 837, 826, 821, 810, 805, 794, 789, 778, 773, 762, 757, 746, 741, 730, 725, 714, 709, 698, 693, 682, 677, 666, 661, 650, 645, 634, 629, 618, 613, 602, 597, 586, 581, 570, 565, 554, 549, 538, 533, 522, 517,
            1019, 1012, 1003, 996, 987, 980, 971, 964, 955, 948, 939, 932, 923, 916, 907, 900, 891, 884, 875, 868, 859, 852, 843, 836, 827, 820, 811, 804, 795, 788, 779, 772, 763, 756, 747, 740, 731, 724, 715, 708, 699, 692, 683, 676, 667, 660, 651, 644, 635, 628, 619, 612, 603, 596, 587, 580, 571, 564, 555, 548, 539, 532, 523, 516,
            1020, 1011, 1004, 995, 988, 979, 972, 963, 956, 947, 940, 931, 924, 915, 908, 899, 892, 883, 876, 867, 860, 851, 844, 835, 828, 819, 812, 803, 796, 787, 780, 771, 764, 755, 748, 739, 732, 723, 716, 707, 700, 691, 684, 675, 668, 659, 652, 643, 636, 627, 620, 611, 604, 595, 588, 579, 572, 563, 556, 547, 540, 531, 524, 515,
            1021, 1010, 1005, 994, 989, 978, 973, 962, 957, 946, 941, 930, 925, 914, 909, 898, 893, 882, 877, 866, 861, 850, 845, 834, 829, 818, 813, 802, 797, 786, 781, 770, 765, 754, 749, 738, 733, 722, 717, 706, 701, 690, 685, 674, 669, 658, 653, 642, 637, 626, 621, 610, 605, 594, 589, 578, 573, 562, 557, 546, 541, 530, 525, 514,
            1022, 1009, 1006, 993, 990, 977, 974, 961, 958, 945, 942, 929, 926, 913, 910, 897, 894, 881, 878, 865, 862, 849, 846, 833, 830, 817, 814, 801, 798, 785, 782, 769, 766, 753, 750, 737, 734, 721, 718, 705, 702, 689, 686, 673, 670, 657, 654, 641, 638, 625, 622, 609, 606, 593, 590, 577, 574, 561, 558, 545, 542, 529, 526, 513,
            1023, 1008, 1007, 992, 991, 976, 975, 960, 959, 944, 943, 928, 927, 912, 911, 896, 895, 880, 879, 864, 863, 848, 847, 832, 831, 816, 815, 800, 799, 784, 783, 768, 767, 752, 751, 736, 735, 720, 719, 704, 703, 688, 687, 672, 671, 656, 655, 640, 639, 624, 623, 608, 607, 592, 591, 576, 575, 560, 559, 544, 543, 528, 527, 512,
            504, 503, 488, 487, 472, 471, 456, 455, 440, 439, 424, 423, 408, 407, 392, 391, 376, 375, 360, 359, 344, 343, 328, 327, 312, 311, 296, 295, 280, 279, 264, 263, 248, 247, 232, 231, 216, 215, 200, 199, 184, 183, 168, 167, 152, 151, 136, 135, 120, 119, 104, 103, 88, 87, 72, 71, 56, 55, 40, 39, 24, 23, 8, 7,
            505, 502, 489, 486, 473, 470, 457, 454, 441, 438, 425, 422, 409, 406, 393, 390, 377, 374, 361, 358, 345, 342, 329, 326, 313, 310, 297, 294, 281, 278, 265, 262, 249, 246, 233, 230, 217, 214, 201, 198, 185, 182, 169, 166, 153, 150, 137, 134, 121, 118, 105, 102, 89, 86, 73, 70, 57, 54, 41, 38, 25, 22, 9, 6,
            506, 501, 490, 485, 474, 469, 458, 453, 442, 437, 426, 421, 410, 405, 394, 389, 378, 373, 362, 357, 346, 341, 330, 325, 314, 309, 298, 293, 282, 277, 266, 261, 250, 245, 234, 229, 218, 213, 202, 197, 186, 181, 170, 165, 154, 149, 138, 133, 122, 117, 106, 101, 90, 85, 74, 69, 58, 53, 42, 37, 26, 21, 10, 5,
            507, 500, 491, 484, 475, 468, 459, 452, 443, 436, 427, 420, 411, 404, 395, 388, 379, 372, 363, 356, 347, 340, 331, 324, 315, 308, 299, 292, 283, 276, 267, 260, 251, 244, 235, 228, 219, 212, 203, 196, 187, 180, 171, 164, 155, 148, 139, 132, 123, 116, 107, 100, 91, 84, 75, 68, 59, 52, 43, 36, 27, 20, 11, 4,
            508, 499, 492, 483, 476, 467, 460, 451, 444, 435, 428, 419, 412, 403, 396, 387, 380, 371, 364, 355, 348, 339, 332, 323, 316, 307, 300, 291, 284, 275, 268, 259, 252, 243, 236, 227, 220, 211, 204, 195, 188, 179, 172, 163, 156, 147, 140, 131, 124, 115, 108, 99, 92, 83, 76, 67, 60, 51, 44, 35, 28, 19, 12, 3,
            509, 498, 493, 482, 477, 466, 461, 450, 445, 434, 429, 418, 413, 402, 397, 386, 381, 370, 365, 354, 349, 338, 333, 322, 317, 306, 301, 290, 285, 274, 269, 258, 253, 242, 237, 226, 221, 210, 205, 194, 189, 178, 173, 162, 157, 146, 141, 130, 125, 114, 109, 98, 93, 82, 77, 66, 61, 50, 45, 34, 29, 18, 13, 2,
            510, 497, 494, 481, 478, 465, 462, 449, 446, 433, 430, 417, 414, 401, 398, 385, 382, 369, 366, 353, 350, 337, 334, 321, 318, 305, 302, 289, 286, 273, 270, 257, 254, 241, 238, 225, 222, 209, 206, 193, 190, 177, 174, 161, 158, 145, 142, 129, 126, 113, 110, 97, 94, 81, 78, 65, 62, 49, 46, 33, 30, 17, 14, 1,
            511, 496, 495, 480, 479, 464, 463, 448, 447, 432, 431, 416, 415, 400, 399, 384, 383, 368, 367, 352, 351, 336, 335, 320, 319, 304, 303, 288, 287, 272, 271, 256, 255, 240, 239, 224, 223, 208, 207, 192, 191, 176, 175, 160, 159, 144, 143, 128, 127, 112, 111, 96, 95, 80, 79, 64, 63, 48, 47, 32, 31, 16, 15, 0
        };
        // any out of bounds address maps to the first hidden pixel
        if ((x >= PANEL_WIDTH_64) || (y >= PANEL_HEIGHT_32)) {
            return (PANEL_WIDTH_64 * PANEL_HEIGHT_32);
        }

        uint16_t i = (y * PANEL_WIDTH_64) + x;
        uint16_t j = XYTable[i];
        return j;
    }
};

// This class encapsulates the whole drawing process in the "serpentine led panel", made of PANEL_WIDTH x PANEL_HEIGHT leds (or pixels)
template <uint16_t TOTAL_LEDS, uint16_t PANEL_WIDTH, uint16_t PANEL_HEIGHT>
class PowerBarsPanel {
private:
    struct Column {
        uint8_t CurrentTop;
        uint8_t CurrentHeight;
        uint32_t LastHeightDecreaseTime;
        uint32_t LastTopSetTime;

        Column()
        {
            CurrentTop = 0;
            CurrentHeight = 0;
            LastHeightDecreaseTime = 0;
            LastTopSetTime = 0;
        }
    };
    enum COLOR_SCHEME {
        NONE = 0,
        CS1 = 1,
        CS2 = 2, // basehue bars brighter if higher
        CS3 = 3 // White bars, brighter if higher
    };

public:
    PowerBarsPanel()
        : _CurrentBaseHue(HSVHue::HUE_AQUA)
        , _ColorScheme(COLOR_SCHEME::CS1) {};
    virtual ~PowerBarsPanel() {};

    // Sets the base hue for the color scheme
    void SetBaseHue(uint8_t theHue) { _CurrentBaseHue = theHue; }
    // Returns the current base hue
    uint8_t GetBaseHue() { return _CurrentBaseHue; }
    // Increments the base hue by the step value
    void IncBaseHue(uint8_t step = 1) { _CurrentBaseHue += step; }

    // Configure the class basic params: the FastLed object and the dimensions of the panel.
    // The only valid dimension so far is  PANEL_WIDTH x PANEL_HEIGHT.
    // Returns false if any of teh params is not valid.
    bool SetParams(CRGBArray<TOTAL_LEDS>* pTheLeds, IPanelMapping<PANEL_WIDTH, PANEL_HEIGHT>* pTheMapping)
    {
        if (TOTAL_LEDS < (PANEL_WIDTH * PANEL_HEIGHT)) {
            return false;
        }
        if (!pTheLeds || !pTheMapping || pTheMapping->GetWidth() != PANEL_WIDTH || pTheMapping->GetHeight() != PANEL_HEIGHT) {
            return false;
        }
        _pTheLeds = pTheLeds;
        _pTheMapping = pTheMapping;

        return true;
    }

    // Draws the n-th bar (0 based) with the value passed. Value must be scaled from 0 to PANEL_HEIGHT*10
    void DrawBar(uint8_t numBar, uint8_t value, uint8_t brightness)
    {
        constexpr uint16_t maxheight = PANEL_HEIGHT - 1;
        if (!_pTheLeds || !_pTheMapping || numBar >= PANEL_WIDTH) {
            return;
        }

        auto now = millis();

        // uint8_t minBoostBin = (uint8_t)(PANEL_WIDTH*0.13); //the first 4 bars in 33 width panel
        // constexpr float maxTrebleBoost=1.8;
        // constexpr float minBassBoost = 1.0;
        // constexpr float freqBoost = ((maxTrebleBoost - minBassBoost) / (float)PANEL_WIDTH);

        // if(numBar>minBoostBin) {
        // 	auto boost = 1.0f + (numBar * freqBoost);
        // 	value = min((int)(value * boost), (PANEL_HEIGHT * 10)-1);
        // }

        if (_TheColumns[numBar].CurrentHeight < value) {
            _TheColumns[numBar].CurrentHeight = value;
            _TheColumns[numBar].LastHeightDecreaseTime = now;
        }
        if (_TheColumns[numBar].CurrentTop < value) {
            _TheColumns[numBar].CurrentTop = value;
            _TheColumns[numBar].LastTopSetTime = now;
        }

        if ((now - _TheColumns[numBar].LastHeightDecreaseTime) > BAR_DEC_TIME_MS) {
            if (_TheColumns[numBar].CurrentHeight >= 10) {
                _TheColumns[numBar].CurrentHeight -= 10;
            } else {
                _TheColumns[numBar].CurrentHeight = 0;
            }
            _TheColumns[numBar].LastHeightDecreaseTime = now;
        }
        if ((now - _TheColumns[numBar].LastTopSetTime) > BAR_TOP_TIME_MS) {
            _TheColumns[numBar].LastTopSetTime = now - (BAR_TOP_TIME_MS * 4 / 5);
            if (_TheColumns[numBar].CurrentTop >= 10) {
                _TheColumns[numBar].CurrentTop -= 10;
            } else {
                _TheColumns[numBar].CurrentTop = 0;
            }
            //_TheColumns[numBar].CurrentTop = _TheColumns[numBar].CurrentHeight;
        }

        value = _TheColumns[numBar].CurrentHeight;

        bool isMax = value > ((maxheight * 10) - 1);

        // 		if(value < 5 && _TheColumns[numBar].CurrentTop < 10) { //do not paint
        // //			(*_pTheLeds)[_pTheMapping->XY(numBar, maxheight)] = CHSV(HSVHue::HUE_BLUE + numBar * 0, 255, 15);// CRGB(2,2,1);//
        // 		}
        // 		else {
        uint8_t y = 0;
        uint8_t maxY = value / 10;
        if (value >= 5) {
            while (y <= maxY) {
                CRGB colPixel;
                switch (_ColorScheme) {
                case COLOR_SCHEME::CS2:
                    colPixel = CHSV(_CurrentBaseHue + (y * 18) + numBar * 6, 255, (y + 2) * 15);
                    break;
                case COLOR_SCHEME::CS1: {
                    // auto bright2 = (y)*10;
                    colPixel = CHSV(_CurrentBaseHue, 255, maxY * 5); //(y + 2) * 15); // CRGB(bright, bright, bright);
                    break;
                }
                default: {
                    // auto bright0 = maxY * 10;
                    CHSV white = rgb2hsv_approximate(CRGB::DarkRed); // CRGB::FairyLight
                    white.v = maxY * 3;
                    colPixel = white; // CRGB(maxY, maxY, maxY);
                    break;
                }
                }
                (*_pTheLeds)[_pTheMapping->XY(numBar, maxheight - y)] += colPixel;
                ++y;
            };
        }
        while (y <= maxheight) { // per pintar el "background"
            switch (_ColorScheme) {
            case COLOR_SCHEME::CS2:
                break;
            case COLOR_SCHEME::CS1:
            default:
                //(*_pTheLeds)[_pTheMapping->XY(numBar, maxheight - y)] = CRGB(1, 1, 1);
                break;
            }
            ++y;
        }
        // if(isMax) {
        // 	y = maxheight;
        // 	(*_pTheLeds)[_pTheMapping->XY(numBar, maxheight - y)] = CHSV(HSVHue::HUE_AQUA,                         255, 15 * (maxheight + 1));
        // }
        // }

        // Now the top
        if (_TheColumns[numBar].CurrentTop >= 10) {
            uint8_t y = min(uint16_t(_TheColumns[numBar].CurrentTop / 10), maxheight);
            CHSV colPixel;
            switch (_ColorScheme) {
            case COLOR_SCHEME::CS2:
                colPixel = CHSV(_CurrentBaseHue + (y * 18) + numBar * 6, 255, (y + 1) * 15);
                break;
            case COLOR_SCHEME::CS1:
                colPixel = CHSV(HSVHue::HUE_PINK, 255, 5 * maxheight);
                break;
            default:
                // auto bright = (y + 2) * 15;
                colPixel = CHSV(HSVHue::HUE_PINK, 255, 5 * maxheight);
                break;
            }
            (*_pTheLeds)[_pTheMapping->XY(numBar, maxheight - y)] = colPixel;
        }
        //_CurrentBaseHue++;
    }

    // shifts all bars to the left and inserts the new one. The values are interpreted as the intensity (V) in HSV
    // The array is supposed to hold PANEL_HEIGHT values
    void PushBar(const uint8_t* pTheValues)
    {
        int ledDest = 0;
        // shift all columns to the left
        for (int iBar = 0; iBar < PANEL_WIDTH - 1; iBar++) {
            for (int y = 0; y < PANEL_HEIGHT; y++) {
                ledDest = _pTheMapping->XY(iBar, y);
                (*_pTheLeds)[ledDest] = (*_pTheLeds)[_pTheMapping->XY(iBar + 1, y)];
                (*_pTheLeds)[ledDest].subtractFromRGB(3);
            }
        }
        // i ara pintem la nova column
        for (int y = 0; y < PANEL_HEIGHT; y++) {
            (*_pTheLeds)[_pTheMapping->XY(PANEL_WIDTH - 1, y)] = CHSV(_CurrentBaseHue, 255, pTheValues[y]);
        }
        _CurrentBaseHue++;
    }

    // shifts all lines to the top and inserts the new one. The values are interpreted as the intensity (V) in HSV
    // The array is supposed to hold PANEL_WIDTH values
    // The values inside the "window" ignoreFromX,0,PANEL_WIDTH-1,ignoreToY-1 will be painted in black.
    // To ignore the "window" pass very big X and 0
    void PushLine(const uint8_t* pTheValues, uint16_t ignoreFromX = 10000, uint8_t ignoreToY = 0)
    {
        int ledDest = 0;
        uint8_t baseFade = 5; //_pianoMode ? 1 : 5; // 5
        // shift all columns to the top
        for (int iLine = 0; iLine < PANEL_HEIGHT - 1; iLine++) {
            for (int x = 0; x < PANEL_WIDTH; x++) {
                ledDest = _pTheMapping->XY(x, iLine);

                _AuxLeds[ledDest] = _AuxLeds[_pTheMapping->XY(x, iLine + 1)];
                //(*_pTheLeds)[ledDest] = (*_pTheLeds)[_pTheMapping->XY(x, iLine + 1)];
                if (x < ignoreFromX || iLine >= ignoreToY) {
                    // if (iLine > 5) {
                    _AuxLeds[ledDest].subtractFromRGB(baseFade);
                    // } else {
                    // (*_pTheLeds)[ledDest].subtractFromRGB(baseFade * 2);
                    // }
                } else {
                    _AuxLeds[ledDest].subtractFromRGB(192);
                }
            }
        }
        // i ara pintem la nova column
        for (int x = 0; x < PANEL_WIDTH; x++) {
            _AuxLeds[_pTheMapping->XY(x, PANEL_HEIGHT - 1)] = CHSV(_CurrentBaseHue, 255, pTheValues[x]);
        }
        _SubCounter++;
        if (_SubCounter > 4) {
            _CurrentBaseHue++;
            _SubCounter = 0;
        }

        // i ara restaurem el buffer auxiliar en l'array de leds
        for (int z = 0; z < PANEL_HEIGHT * PANEL_WIDTH; z++) {
            (*_pTheLeds)[z] += _AuxLeds[z];
        }
    }

    // Draw a portion of the contents of the u8g2 screen buffer in the led panel.
    // The portion drawed goes from pixel 0 to pixel width-1 horizontally, and vertically the number of vertical tiles.
    // The color and value are specified in Hue/Intensity
    void DrawScreenBuffer(const uint8_t* pTheScreenBuffer, uint16_t bufferWidthInTiles, uint16_t width, uint8_t vertTiles, uint8_t hue, uint8_t intensity)
    {
        uint8_t pixColor = _CurrentBaseHue;
        for (uint8_t tileRow = 0; tileRow < vertTiles; tileRow++) {
            for (uint16_t x = 0; x < width; x++) {
                // each byte in the buffer pos represent 8 pixels "vertically", on if the corresponding bit is 1
                // see https://github.com/olikraus/u8g2/wiki/u8g2reference#memory-structure-for-controller-with-u8x8-support
                uint8_t mask = 0x01;
                uint8_t pixelCol = pTheScreenBuffer[x];
                for (uint8_t xbit = 0; xbit < 8; xbit++) {
                    if (pixelCol & mask) { // pintar aquest bit!
                        (*_pTheLeds)[_pTheMapping->XY(x, (tileRow * 8) + xbit)] = CHSV(pixColor, 255, intensity);
                    }
                    mask = mask << 1;
                    pixColor++;
                }
            }
            pTheScreenBuffer += bufferWidthInTiles * 8; // advance to the next tileRow
        }
    }

    // Draw a portion of the contents of the u8g2 screen buffer in the led panel.
    // This method draws the whole horizontal buffer, but only the parts that fall "inside" the led panel.
    // Starts drawing at first line on firstVertTile (starts at 0), until lastVertTile (included).
    // First buffer column is always 0.
    // To define the drawing window, use drawXPos, drawYPos. That position will be the corresponding to position (0, firstVertTile) in buffer.
    // It is posible to define negative drawXPos values. This way the 1st pixel painted will be the one at the 0 position.
    // The color and value are specified in Hue/Intensity
    void DrawScreenBufferXY(const uint8_t* pTheScreenBuffer, uint16_t bufferWidthInTiles, uint8_t firstVertTile, uint8_t lasttVertTile,
        int16_t drawXPos, int16_t drawYPos, uint8_t hue, uint8_t intensity)
    {
        uint8_t pixColor = hue;

        pTheScreenBuffer += (bufferWidthInTiles * 8) * firstVertTile;

        int16_t totalPixels = bufferWidthInTiles * 8;
        for (uint8_t tileRow = firstVertTile; tileRow <= lasttVertTile; tileRow++) {
            pixColor = hue;
            int16_t x = 0;
            if (drawXPos < 0) {
                x = abs(drawXPos);
            }

            for (; x < totalPixels; x++) {
                pixColor+=2;
                if ((drawXPos + x) < 0) {
                    continue;
                }
                if ((drawXPos + x) >= PANEL_WIDTH) {
                    break;
                }
                // each byte in the buffer pos represent 8 pixels "vertically", on if the corresponding bit is 1
                // see https://github.com/olikraus/u8g2/wiki/u8g2reference#memory-structure-for-controller-with-u8x8-support
                uint8_t mask = 0x01;
                uint8_t pixelCol = pTheScreenBuffer[x];
                if(!pixelCol) {
                    continue;
                }
                for (uint8_t xbit = 0; xbit < 8; xbit++) {
                    if (pixelCol & mask) { // pintar aquest bit!
                        (*_pTheLeds)[_pTheMapping->XY(x + drawXPos, (tileRow * 8) + xbit + drawYPos)] += CHSV(pixColor, 180, intensity);
                    }
                    mask = mask << 1;
                    // pixColor++;
                }
            }
            pTheScreenBuffer += bufferWidthInTiles * 8; // advance to the next tileRow
        }
    }

private:
    CRGBArray<TOTAL_LEDS>* _pTheLeds; // The FastLed object
    CRGBArray<TOTAL_LEDS> _AuxLeds; // Buffer auxiliar per mantenir estat dels efectes sense tocar el buffer principal.
    IPanelMapping<PANEL_WIDTH, PANEL_HEIGHT>* _pTheMapping; // The class that will provide the mapping coordinates
    Column _TheColumns[PANEL_WIDTH];

    COLOR_SCHEME _ColorScheme;

    uint8_t _CurrentBaseHue;
    uint8_t _SubCounter;
};
